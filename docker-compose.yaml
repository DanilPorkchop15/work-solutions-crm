version: "3.8"
services:
  builder:
    image: node:20.11.0-slim
    working_dir: /app
    volumes:
      - .:/app
      - .npmrc:/tmp/.npmrc
    environment:
      - HOME=/tmp
      - NODE_OPTIONS=--max-old-space-size=6144
    command:
      - sh
      - -c
      - |
        apt-get update && apt-get install -y sudo
        npm ci --include=dev --legacy-peer-deps
        npx nx run-many -t build
    user: "${UID:-0}:${GID:-0}"

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend
    ports:
      - "8080:80"
    environment:
      - VITE_APP_BACKEND=https://crm.worksolutions.tech/api
    restart: unless-stopped
    networks:
      - app-network

  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend
      args:
        app_version: ${APP_VERSION:-1.0.0}
        app_source_branch: ${APP_SOURCE_BRANCH:-main}
        app_source_commit: ${APP_SOURCE_COMMIT:-unknown}
        app_build_time: ${APP_BUILD_TIME:-unknown}
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - PORT=4000
      - KAFKA_BROKER=kafka:9092
      - POSTGRES_DB=${DB_NAME:-postgres}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_HOST=database
      - POSTGRES_PORT=5432
    volumes:
      - ./packages/backend/config.yaml:/app/config.yaml
    depends_on:
      - database
    restart: unless-stopped
    networks:
      - app-network

  database:
    image: postgres:12-alpine
    environment:
      - POSTGRES_DB=${DB_NAME:-postgres}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
    volumes:
      - database_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  database_data:
